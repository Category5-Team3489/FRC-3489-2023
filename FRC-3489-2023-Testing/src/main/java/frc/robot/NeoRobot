// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import java.util.function.DoubleSupplier;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.CANSparkMax.ControlType;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;

/**
 * The VM is configured to automatically run this class, and to call the functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the name of this class or
 * the package after creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
    private final CANSparkMax motor = new CANSparkMax(1, MotorType.kBrushless);
    private final SparkMaxPIDController pidController;
    private final RelativeEncoder encoder;

    public Robot() {
        motor.restoreFactoryDefaults();
        motor.setIdleMode(IdleMode.kBrake);
        motor.enableVoltageCompensation(12);
        motor.burnFlash();

        pidController = motor.getPIDController();
        encoder = motor.getEncoder();

        setPID();
    }

    private void setAngleRadians(double angleRadians) {
        
    }

    private void setPID() {
        pidController.setP(1);

    }

    private double getAngleRadians() {
        double position = encoder.getPosition();
        return (position * 2 * Math.PI);
    }

    private double getResistGravityVolts() {
        double angleRadians = getAngleRadians();
        return Math.cos(angleRadians) * 0;
    }

    /**
     * This function is run when the robot is first started up and should be used for any
     * initialization code.
     */
    @Override
    public void robotInit() {}

    @Override
    public void robotPeriodic() {
        // System.out.println(encoder.getPosition());
        System.out.println(getAngleRadians() * (180 / Math.PI));
    }

    @Override
    public void autonomousInit() {

    }

    @Override
    public void autonomousPeriodic() {}

    @Override
    public void teleopInit() {
        encoder.setPosition(0);
    }

    @Override
    public void teleopPeriodic() {
        // motor.setVoltage(getResistGravityVolts());
        // pidController.setReference(0.5, ControlType.kPosition);
    }

    @Override
    public void disabledInit() {

    }

    @Override
    public void disabledPeriodic() {}

    @Override
    public void testInit() {}

    @Override
    public void testPeriodic() {}

    @Override
    public void simulationInit() {}

    @Override
    public void simulationPeriodic() {}
}
